package mandelbrot;

import java.util.concurrent.atomic.AtomicIntegerArray;

/**
 * A class that represents an image of integers or "number-boxes".
 * It is generated by the Buddhabrot, and is passed into a color map to generate a color image.
 * It implements a thread-safe 2d array of integers.
 */
public class IntegerImage {
    private final int width;
    private final int height;
    private final AtomicIntegerArray image;

    /**
     * Constructor for the IntegerImage.
     * @param width The width of the image.
     * @param height The height of the image.
     */
    public IntegerImage(int width, int height) {
        this.image = new AtomicIntegerArray(width * height);
        this.width = width;
        this.height = height;
    }

    /**
     * Gets the width of the image.
     * @return The width of the image.
     */
    public int getWidth() {
        return width;
    }

    /**
     * Gets the height of the image.
     * @return The height of the image.
     */
    public int getHeight() {
        return height;
    }

    /**
     * Gets the value at the specified index.
     * @param x The x-coordinate of the index.
     * @param y The y-coordinate of the index.
     * @return The value at the specified index.
     */
    public int get(int x, int y) {
        return image.get(x + y * width);
    }

    /**
     * Sets the value at the specified index.
     * @param x The x-coordinate of the index.
     * @param y The y-coordinate of the index.
     * @param value The value to set.
     */
    public void set(int x, int y, int value) {
        image.set(x + y * width, value);
    }

    /**
     * Increments the value at the specified index.
     * @param x The x-coordinate of the index.
     * @param y The y-coordinate of the index.
     */
    public void increment(int x, int y) {
        image.incrementAndGet(x + y * width);
    }

    /**
     * Decrements the value at the specified index.
     * @param x The x-coordinate of the index.
     * @param y The y-coordinate of the index.
     */
    public void decrement(int x, int y) {
        image.decrementAndGet(x + y * width);
    }

    /**
     * Sets the value to the maximum of the current value and the given value.
     * @param x The x-coordinate of the index.
     * @param y The y-coordinate of the index.
     * @param value The value to set the maximum to.
     */
    public void setMax(int x, int y, int value) {
        while (true) {
            int current = image.get(x + y * width);
            if (current >= value) return;
            if (image.compareAndSet(x + y * width, current, value)) return;
        }
    }


    /**
     * Copies the image.
     * @return A copy of the image.
     */
    public IntegerImage copy() {
        IntegerImage copy = new IntegerImage(width, height);
        for (int i = 0; i < width * height; i++) copy.image.set(i, Math.max(image.get(i), 0));
        return copy;
    }
}
